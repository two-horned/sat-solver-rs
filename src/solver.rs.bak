use core::alloc::{Allocator, Layout};
use core::cmp::Reverse;
use core::usize;
use std::isize;

use rand::prelude::*;

use crate::alloc::PoolAlloc;
use crate::data::{blocks_needed, bytes_needed, Clause};
use crate::utils::*;

pub enum SolverError {
    VariableIsZero,
    VariableTooLarge(isize),
}

impl Solver {
    pub fn new(vrs: usize, cls: usize) -> Self {
        let clause_allocator = {
            let bytes = bytes_needed(vrs);
            let layout = Layout::from_size_align(bytes * cls, 32).unwrap();
            PoolAlloc::new(layout, 20 + vrs * cls)
        };

        let vector_allocator = {
            let layout =
                Layout::from_size_align(size_of::<Clause<&PoolAlloc>>() * cls, 32).unwrap();
            PoolAlloc::new(layout, 20 + vrs * cls)
        };

        let problem_to_solve = unsafe {
            core::mem::transmute(Problem::new(vrs, cls, &clause_allocator, &vector_allocator))
        };

        Self {
            amount_variables: vrs,
            amount_conflicts: cls,
            clause_allocator,
            vector_allocator,
            problem_to_solve,
        }
    }

    pub fn add_clause(&mut self, literals: Vec<isize>) -> Result<(), SolverError> {
        let mut new_clause: Clause<&'static PoolAlloc> = {
            let blocks = blocks_needed(self.amount_variables);
            unsafe { core::mem::transmute(Clause::new(blocks, &self.clause_allocator)) }
        };
        for i in literals {
            if i == 0 {
                return Err(SolverError::VariableIsZero);
            }
            if isize::abs(i) > self.amount_variables as isize {
                return Err(SolverError::VariableTooLarge(i));
            }
            new_clause.set(i);
        }

        self.problem_to_solve.clauses.push(new_clause);
        Ok(())
    }
}

pub struct Solver {
    amount_variables: usize,
    amount_conflicts: usize,
    clause_allocator: PoolAlloc,
    vector_allocator: PoolAlloc,
    problem_to_solve: Problem<&'static PoolAlloc, &'static PoolAlloc>,
}

impl<A, B> Problem<A, B>
where
    A: Allocator + Copy,
    B: Allocator + Copy,
{
    fn new(vrs: usize, cls: usize, a: A, b: B) -> Problem<A, B> {
        let blocks = blocks_needed(vrs);
        let guessed = Clause::new(blocks, a);
        let deduced = Clause::new(blocks, a);
        let clauses = Vec::with_capacity_in(cls, b);

        Problem {
            guessed,
            deduced,
            clauses,
        }
    }

    fn prepare(&mut self) {
        self.clauses.retain(|x| x.disjoint_switched_self()); // Remove tautologies
        self.clauses.sort_by_key(Clause::elements); // Sort clauses by length
        self.combine(); // Subsumption ellimination + shrinking clauses via symmetry
    }

    fn combine(&mut self) {
        let mut i = 0;
        while i < self.clauses.len() {
            let j = self.break_symmetry(i);
            let x = self.clauses[j].clone();
            let t = self
                .clauses
                .iter()
                .take(i + 1)
                .skip(j + 1)
                .filter(|y| x.subset_of(y))
                .count();
            self.subsumption_from(j);
            i -= t;
            i += 1;
        }
    }

    fn subsumption_from(&mut self, k: usize) {
        let current = self.clauses[k].clone();
        self.clauses.retain_from(|x| !current.subset_of(x), k + 1);
    }

    fn break_symmetry(&mut self, k: usize) -> usize {
        let x = &self.clauses[k];

        match self
            .clauses
            .iter()
            .take(k)
            .find_map(|y| is_combinable(x, y))
        {
            None => (),
            Some(badness) => {
                self.clauses[k].unset(badness);
                let k = self.clauses.descend_by_key(k, Clause::elements);
                return self.break_symmetry(k);
            }
        }
        k
    }

    fn remove_long_clauses(&mut self) {
        while let Some(last) = self.clauses.last_mut() {
            if last.elements() >= self.clauses.len() {
                self.clauses.pop();
            } else {
                return;
            }
        }
    }

    fn remove_pure_literals(&mut self) {
        if self.clauses.len() == 0 {
            return;
        }

        let mut acc = self.clauses[0].clone();
        self.clauses
            .iter()
            .skip(1)
            .for_each(|x| acc.unsafe_zip_clause_in(x, |y, z| *y |= z));
        let pure_literals = acc.difference_switched_self();
        self.clauses.retain(|x| pure_literals.disjoint(x));
    }

    fn choice(&self) -> Option<isize> {
        let literals: Vec<isize> = self.clauses[0].iter_literals().collect();
        literals.choose(&mut rand::rng()).copied()
    }

    fn resolve(&mut self, literal: isize) {
        let clauses = &mut self.clauses;
        clauses.retain(|x| !x.read(literal));

        for i in 0..clauses.len() {
            let x = &mut clauses[i];
            if x.read(-literal) {
                x.unset(-literal);
                clauses.descend_by_key(i, Clause::elements);
            }
        }
    }
}

fn is_combinable<A>(this: &Clause<A>, with: &Clause<A>) -> Option<isize>
where
    A: Allocator + Copy,
{
    let (badness, control) = {
        let mut difference = with.unsafe_iter_differences(&this);
        (difference.next(), difference.next())
    };

    if control.is_none() {
        badness
    } else {
        None
    }
}

struct Problem<A, B>
where
    A: Allocator + Copy,
    B: Allocator + Copy,
{
    guessed: Clause<A>,
    deduced: Clause<A>,
    clauses: Vec<Clause<A>, B>,
}

fn remove_rarest_literal(clauses: &mut Vec<Clause>, a: &PoolAlloc) -> bool {
    fn fix_clause(clauses: &mut Vec<Clause>, k: usize) {
        if clauses[k].disjoint_switched_self() {
            let k = clauses.ascend_by_key(k, Clause::elements);
            println!("WTF.");
            surrender(clauses, k);
        } else {
            println!("YEAAAAAAAAAh.");
            clauses.remove(k);
        }
    }

    fn work_once(literal: isize, clauses: &mut Vec<Clause>) {
        let k = clauses.iter().position(|x| x.read(literal)).unwrap();
        let mut c = clauses.remove(k);
        c.unset(literal);
        let to_modify: Box<[usize]> = clauses
            .iter()
            .enumerate()
            .filter_map(|(i, x)| if x.read(-literal) { Some(i) } else { None })
            .rev()
            .collect();
        for i in to_modify {
            clauses[i].unset(-literal);
            clauses[i].unsafe_zip_clause_in(&c, |x, y| *x |= y);
            fix_clause(clauses, i);
        }
    }

    fn work_twice(literal: isize, clauses: &mut Vec<Clause>) {
        let mut a: [usize; 4] = [0; 4];
        a[0] = clauses.iter().position(|x| x.read(literal)).unwrap();
        a[1] = clauses
            .iter()
            .skip(a[0])
            .position(|x| x.read(literal))
            .unwrap();
        a[2] = clauses.iter().position(|x| x.read(-literal)).unwrap();
        a[3] = clauses
            .iter()
            .skip(a[2])
            .position(|x| x.read(-literal))
            .unwrap();

        for i in 0..2 {
            clauses[i].unset(literal);
            clauses[i + 2].unset(-literal);
        }

        let copies: [Clause; 4] = {
            let u = clauses[a[0]].clone();
            let v = clauses[a[1]].clone();
            let w = clauses[a[2]].clone();
            let x = clauses[a[3]].clone();
            [u, v, w, x]
        };

        for i in 0..2 {
            clauses[i].unsafe_zip_clause_in(&copies[i + 1], |x, y| *x |= y);
            clauses[i + 1].unsafe_zip_clause_in(&copies[i ^ 1], |x, y| *x |= y);
        }

        a.sort_by_key(|x| Reverse(*x));
        a.iter().for_each(|&i| fix_clause(clauses, i));
    }

    if 0 == clauses.len() {
        return false;
    }

    let len = clauses[0].content_length();
    let mut once = Clause::new(len, a);
    let mut twice = Clause::new(len, a);
    let mut thrice = Clause::new(len, a);

    for clause in &mut *clauses {
        once.unsafe_zip_clause_in(&clause, |x, y| *x |= y);
        twice.unsafe_zip3_clause_in(&clause, &once, |x, y, z| *x |= y & z);
        thrice.unsafe_zip3_clause_in(&clause, &twice, |x, y, z| *x |= y & z);
    }

    once.unsafe_zip3_clause_in(&twice, &thrice, |x, y, z| *x &= !(y | z));
    twice.unsafe_zip_clause_in(&thrice, |x, y| *x &= !y);

    match once.iter_literals().next() {
        None => (),
        Some(x) => {
            work_once(x, clauses);
            return true;
        }
    }

    while let Some(x) = twice.iter_literals().next() {
        if twice.read(-x) {
            work_twice(x, clauses);
            return true;
        }
    }
    false
}

fn components(mut clauses: Vec<Clause>) -> Vec<Vec<Clause>> {
    let mut v = Vec::with_capacity(clauses.len());
    let mut e = Vec::with_capacity(clauses.len());
    while let Some(x) = clauses.pop() {
        let mut w = Vec::with_capacity(clauses.len());
        let mut r = x.variables();
        w.push(x.clone());
        loop {
            e.clear();
            clauses.extract_in(&mut e, |x| x.unsafe_has_variables(&r));
            if e.is_empty() {
                break;
            }
            e.iter().for_each(|x| x.unsafe_enrich_variables(&mut r));
            w.extend_from_slice(&e);
        }
        w.sort_by_key(Clause::elements);
        v.push(w);
    }
    v.sort_by(|x, y| usize::cmp(&x.len(), &y.len()));
    v
}

fn guess<'a>(clauses: Vec<Clause>, conflicts: &mut Clause, a: &'a PoolAlloc) -> bool {
    if clauses.is_empty() {
        return true;
    }
    if clauses[0].is_null() {
        false;
    }
    let comps = components(clauses);
    for mut c in comps {
        match choice(&c) {
            None => return false,
            Some(x) => {
                resolve(x, &mut c);
                kernelize(&mut c, a);
                conflicts.set(-x);
                match guess(c, conflicts, a) {
                    false => return false,
                    true => conflicts.unset(-x),
                }
            }
        }
    }
    true
}

pub fn solve_problem<'a>(mut clauses: Vec<Clause<'a>>, a: &'a PoolAlloc) -> bool {
    let mut wrong_guesses = 0;
    if clauses.len() == 0 {
        return true;
    };
    let len = clauses[0].content_length();
    prepare(&mut clauses);
    loop {
        kernelize(&mut clauses, a);
        let mut conflicts = Clause::new(len, a);
        let res = guess(clauses.clone(), &mut conflicts, a);
        match res {
            true => {
                println!("Wrong guesses: {}", wrong_guesses);
                return true;
            }
            false => {
                wrong_guesses += 1;
                if conflicts.is_null() {
                    println!("Wrong guesses: {}", wrong_guesses);
                    return false;
                }
                clauses.push(conflicts);
                clauses.descend(clauses.len() - 1);
            }
        }
    }
}

//  fn guess(mut clauses: Vec<Clause>, a: &PoolAlloc) -> bool {
//      kernelize(&mut clauses, a);
//      if clauses.is_empty() {
//          return true;
//      }
//      let comps = components(clauses);
//      //println!("Length of components is {}", comps.len());

//      for mut c in comps {
//          let v = choice(&c);
//          match v {
//              None => return false,
//              Some(x) => {
//                  let mut d = c.clone();
//                  resolve(x, &mut c);
//                  if guess(c, a) {
//                      continue;
//                  }
//                  resolve(-x, &mut d);
//                  if !guess(d, a) {
//                      return false;
//                  }
//              }
//          }
//      }
//      true
//  }

//  pub fn solve_problem(mut clauses: Vec<Clause>, a: &PoolAlloc) -> bool {
//      prepare(&mut clauses);
//      guess(clauses, a)
//  }
